//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ADLXWrapper.Bindings {

public class IADLXGPUMetricsSupport : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXGPUMetricsSupport(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXGPUMetricsSupport_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXGPUMetricsSupport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXGPUMetricsSupport obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXGPUMetricsSupport(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXGPUMetricsSupport_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUUsage(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUUsage(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUClockSpeed(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUClockSpeed(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUVRAMClockSpeed(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUVRAMClockSpeed(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUTemperature(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUTemperature(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUHotspotTemperature(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUHotspotTemperature(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUPower(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUPower(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUTotalBoardPower(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUTotalBoardPower(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUFanSpeed(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUFanSpeed(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUVRAM(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUVRAM(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUVoltage(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUVoltage(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUUsageRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUUsageRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUClockSpeedRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUClockSpeedRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUVRAMClockSpeedRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUVRAMClockSpeedRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUTemperatureRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUTemperatureRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUHotspotTemperatureRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUHotspotTemperatureRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUPowerRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUPowerRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUFanSpeedRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUFanSpeedRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUVRAMRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUVRAMRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUVoltageRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUVoltageRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUTotalBoardPowerRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUTotalBoardPowerRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT GetGPUIntakeTemperatureRange(ref int minValue, ref int maxValue) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_GetGPUIntakeTemperatureRange(swigCPtr, ref minValue, ref maxValue);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedGPUIntakeTemperature(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUMetricsSupport_IsSupportedGPUIntakeTemperature(swigCPtr, ref supported);
    return ret;
  }

}

}
