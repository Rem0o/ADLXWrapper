//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ADLXWrapper.Bindings {

public class ADLXExt : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ADLXExt(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ADLXExt obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ADLXExt obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ADLXExt() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_ADLXExt(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ADLXExt() : this(ADLXPINVOKE.new_ADLXExt(), true) {
  }

  public ADLX_RESULT SetSpeed(IADLXManualFanTuning fanTuning, int speed, IADLXManualFanTuningStateList list) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.ADLXExt_SetSpeed(swigCPtr, IADLXManualFanTuning.getCPtr(fanTuning), speed, IADLXManualFanTuningStateList.getCPtr(list));
    return ret;
  }

  public ADLX_RESULT GetCurrentMetrics(IADLXPerformanceMonitoringServices services, IADLXGPU gpu, ref GPUMetricsStruct  metricsStruct) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.ADLXExt_GetCurrentMetrics(swigCPtr, IADLXPerformanceMonitoringServices.getCPtr(services), IADLXGPU.getCPtr(gpu), ref metricsStruct );
    return ret;
  }

  public ADLX_RESULT GetCurrentMetrics1(IADLXPerformanceMonitoringServices services, IADLXGPU gpu, ref GPUMetricsStruct1  metricsStruct1) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.ADLXExt_GetCurrentMetrics1(swigCPtr, IADLXPerformanceMonitoringServices.getCPtr(services), IADLXGPU.getCPtr(gpu), ref metricsStruct1 );
    return ret;
  }

}

}
