//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ADLXWrapper.Bindings {

public class IADLXGPUPresetTuning : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXGPUPresetTuning(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXGPUPresetTuning_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXGPUPresetTuning obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXGPUPresetTuning obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXGPUPresetTuning(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXGPUPresetTuning_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedPowerSaver(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsSupportedPowerSaver(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedQuiet(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsSupportedQuiet(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedBalanced(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsSupportedBalanced(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedTurbo(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsSupportedTurbo(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedRage(ref bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsSupportedRage(swigCPtr, ref supported);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentPowerSaver(ref bool isPowerSaver) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsCurrentPowerSaver(swigCPtr, ref isPowerSaver);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentQuiet(ref bool isQuiet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsCurrentQuiet(swigCPtr, ref isQuiet);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentBalanced(ref bool isBalance) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsCurrentBalanced(swigCPtr, ref isBalance);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentTurbo(ref bool isTurbo) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsCurrentTurbo(swigCPtr, ref isTurbo);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentRage(ref bool isRage) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_IsCurrentRage(swigCPtr, ref isRage);
    return ret;
  }

  public virtual ADLX_RESULT SetPowerSaver() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_SetPowerSaver(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetQuiet() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_SetQuiet(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetBalanced() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_SetBalanced(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetTurbo() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_SetTurbo(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetRage() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPUPresetTuning_SetRage(swigCPtr);
    return ret;
  }

}

}
